# strategies/fibonacci.py
from __future__ import annotations

import asyncio
from typing import Optional

from strategies.martingale import MartingaleStrategy, DEFAULTS as MG_DEFAULTS
from zoneinfo import ZoneInfo
from core.http_async import HttpClient
from core.intrade_api_async import (
    get_balance_info,
    get_current_percent,
    place_trade,
    check_trade_result,
    is_demo_account,
)
from core.money import format_amount

MOSCOW_TZ = ZoneInfo("Europe/Moscow")

# –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∏ –ø—Ä–æ—á–∏–µ –º–µ—Ç–æ–¥—ã –∏–∑ MartingaleStrategy
# —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –ó–¥–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
# –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è.
DEFAULTS = dict(MG_DEFAULTS)
DEFAULTS.pop("coefficient", None)


def _fib(n: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ (1-indexed)."""
    seq = [1, 1]
    while len(seq) < n:
        seq.append(seq[-1] + seq[-2])
    return seq[n - 1]


class FibonacciStrategy(MartingaleStrategy):
    def __init__(
        self,
        http_client: HttpClient,
        user_id: str,
        user_hash: str,
        symbol: str,
        log_callback=None,
        *,
        timeframe: str = "M1",
        params: Optional[dict] = None,
        **_,
    ):
        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        p = dict(DEFAULTS)
        if params:
            p.update(params)
        super().__init__(
            http_client,
            user_id,
            user_hash,
            symbol,
            log_callback,
            timeframe=timeframe,
            params=p,
        )
        # –ø–∞—Ä–∞–º–µ—Ç—Ä coefficient –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.params.pop("coefficient", None)

    async def run(self) -> None:  # noqa: C901 - —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–∞–∫ —É –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self._running = True
        log = self.log or (lambda s: None)

        try:
            self._anchor_is_demo = await is_demo_account(self.http_client)
            mode_txt = "–î–ï–ú–û" if self._anchor_is_demo else "–†–ï–ê–õ"
            log(f"[{self.symbol}] –†–µ–∂–∏–º —Å—á—ë—Ç–∞: {mode_txt}")
        except Exception as e:  # pragma: no cover - —Å–µ—Ç—å
            log(f"[{self.symbol}] ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º —Å—á—ë—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
            self._anchor_is_demo = False

        try:
            amount, cur_ccy, display = await get_balance_info(
                self.http_client, self.user_id, self.user_hash
            )
            log(
                f"[{self.symbol}] –ë–∞–ª–∞–Ω—Å: {display} ({format_amount(amount)}), —Ç–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: {cur_ccy}"
            )
        except Exception as e:  # pragma: no cover - —Å–µ—Ç—å
            log(f"[{self.symbol}] ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")

        series_left = int(self.params.get("repeat_count", DEFAULTS["repeat_count"]))
        if series_left <= 0:
            log(
                f"[{self.symbol}] üõë repeat_count={series_left} ‚Äî –Ω–µ—á–µ–≥–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ."
            )
            self._running = False
            (self.log or (lambda s: None))(f"[{self.symbol}] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
            return

        try:
            if self.symbol != "*" and self.timeframe != "*":
                from core.signal_waiter import peek_signal_state

                st = peek_signal_state(self.symbol, self.timeframe)
                self._last_signal_ver = st.get("version", 0) or 0
                if self.log:
                    self.log(
                        f"[{self.symbol}] –ó–∞—è–∫–æ—Ä–µ–Ω–∞ –≤–µ—Ä—Å–∏—è —Å–∏–≥–Ω–∞–ª–∞: v{self._last_signal_ver}"
                    )
            else:
                self._last_signal_ver = 0
        except Exception:  # pragma: no cover
            self._last_signal_ver = 0

        next_start_step = 1
        while self._running and series_left > 0:
            self._last_signal_at_str = None
            await self._pause_point()

            if self._use_any_symbol:
                self.symbol = "*"
            if self._use_any_timeframe:
                self.timeframe = "*"
                self.params["timeframe"] = self.timeframe

            if not await self._ensure_anchor_currency():
                continue
            if not await self._ensure_anchor_account_mode():
                continue

            try:
                bal, _, _ = await get_balance_info(
                    self.http_client, self.user_id, self.user_hash
                )
            except Exception:  # pragma: no cover
                bal = 0.0

            min_balance = float(self.params.get("min_balance", DEFAULTS["min_balance"]))
            if bal < min_balance:
                log(
                    f"[{self.symbol}] ‚õî –ë–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ ({format_amount(bal)} < {format_amount(min_balance)}). –û–∂–∏–¥–∞–Ω–∏–µ..."
                )
                await self.sleep(2.0)
                continue

            base = float(
                self.params.get("base_investment", DEFAULTS["base_investment"])
            )
            max_steps = int(self.params.get("max_steps", DEFAULTS["max_steps"]))
            min_pct = int(self.params.get("min_percent", DEFAULTS["min_percent"]))
            wait_low = float(
                self.params.get("wait_on_low_percent", DEFAULTS["wait_on_low_percent"])
            )
            sig_timeout = float(
                self.params.get("signal_timeout_sec", DEFAULTS["signal_timeout_sec"])
            )
            account_ccy = self._anchor_ccy

            if max_steps <= 0:
                log(
                    f"[{self.symbol}] ‚ö† max_steps={max_steps} ‚Äî —Å–µ—Ä–∏—é –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ–º. –ñ–¥—É —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª."
                )
                await self.sleep(1.0)
                continue

            step = next_start_step
            did_place_any_trade = False
            series_direction = None

            while self._running and step <= max_steps:
                await self._pause_point()

                if not await self._ensure_anchor_currency():
                    continue
                if not await self._ensure_anchor_account_mode():
                    continue

                stake = base * _fib(step)

                if series_direction is None and self.symbol == "*":
                    self._status("–æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞")
                    log(
                        f"[{self.symbol}] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ {self.timeframe} (—à–∞–≥ {step})..."
                    )
                    try:
                        direction = await self.wait_signal(timeout=sig_timeout)
                    except asyncio.TimeoutError:
                        log(
                            f"[{self.symbol}] ‚åõ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–∏–∏ ‚Äî –≤—ã—Ö–æ–∂—É –∏–∑ —Å–µ—Ä–∏–∏."
                        )
                        break
                    series_direction = 1 if int(direction) == 1 else 2
                    continue

                pct = await get_current_percent(
                    self.http_client,
                    investment=stake,
                    option=self.symbol,
                    minutes=self._trade_minutes,
                    account_ccy=account_ccy,
                    trade_type=self._trade_type,
                )
                if pct is None:
                    self._status("–æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞")
                    log(f"[{self.symbol}] ‚ö† –ù–µ –ø–æ–ª—É—á–∏–ª–∏ % –≤—ã–ø–ª–∞—Ç—ã. –ü–∞—É–∑–∞ –∏ –ø–æ–≤—Ç–æ—Ä.")
                    await self.sleep(1.0)
                    continue
                if pct < min_pct:
                    self._status("–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞")
                    if not self._low_payout_notified:
                        log(
                            f"[{self.symbol}] ‚Ñπ –ù–∏–∑–∫–∏–π payout {pct}% < {min_pct}% ‚Äî –∂–¥—ë–º..."
                        )
                        self._low_payout_notified = True
                    await self.sleep(wait_low)
                    continue
                if self._low_payout_notified:
                    log(
                        f"[{self.symbol}] ‚Ñπ –†–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è (—Ç–µ–∫—É—â–∏–π payout = {pct}%)"
                    )
                    self._low_payout_notified = False

                if series_direction is None:
                    self._status("–æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞")
                    log(
                        f"[{self.symbol}] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ {self.timeframe} (—à–∞–≥ {step})..."
                    )
                    try:
                        direction = await self.wait_signal(timeout=sig_timeout)
                    except asyncio.TimeoutError:
                        log(
                            f"[{self.symbol}] ‚åõ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–∏–∏ ‚Äî –≤—ã—Ö–æ–∂—É –∏–∑ —Å–µ—Ä–∏–∏."
                        )
                        break
                    series_direction = 1 if int(direction) == 1 else 2

                status = series_direction

                try:
                    cur_balance, _, _ = await get_balance_info(
                        self.http_client, self.user_id, self.user_hash
                    )
                except Exception:  # pragma: no cover
                    cur_balance = None
                min_floor = float(
                    self.params.get("min_balance", DEFAULTS["min_balance"])
                )
                if cur_balance is None or (cur_balance - stake) < min_floor:
                    log(
                        f"[{self.symbol}] üõë –°–¥–µ–ª–∫–∞ {format_amount(stake)} {account_ccy} –º–æ–∂–µ—Ç –æ–ø—É—Å—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∏–∂–µ "
                        f"{format_amount(min_floor)} {account_ccy}"
                        + (
                            ""
                            if cur_balance is None
                            else f" (—Ç–µ–∫—É—â–∏–π {format_amount(cur_balance)} {account_ccy})"
                        )
                        + ". –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é."
                    )
                    self._running = False
                    break

                if not await self._ensure_anchor_currency():
                    continue
                if not await self._ensure_anchor_account_mode():
                    continue

                log(
                    f"[{self.symbol}] step={step} stake={format_amount(stake)} min={self._trade_minutes} "
                    f"side={'UP' if status == 1 else 'DOWN'} payout={pct}%"
                )

                try:
                    demo_now = await is_demo_account(self.http_client)
                except Exception:
                    demo_now = False
                account_mode = "–î–ï–ú–û" if demo_now else "–†–ï–ê–õ"

                self._status("–¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É")
                trade_kwargs = {"trade_type": self._trade_type}
                time_arg = self._trade_minutes
                if self._trade_type == "classic":
                    if not self._next_expire_dt:
                        log(
                            f"[{self.symbol}] ‚ùå –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –¥–ª—è classic. –ü–∞—É–∑–∞ –∏ –ø–æ–≤—Ç–æ—Ä."
                        )
                        await self.sleep(1.0)
                        continue
                    time_arg = self._next_expire_dt.strftime("%H:%M")
                    trade_kwargs["date"] = self._next_expire_dt.strftime("%d-%m-%Y")
                attempt = 0
                trade_id = None
                while attempt < 4:
                    trade_id = await place_trade(
                        self.http_client,
                        user_id=self.user_id,
                        user_hash=self.user_hash,
                        investment=stake,
                        option=self.symbol,
                        status=status,
                        minutes=time_arg,
                        account_ccy=account_ccy,
                        strict=True,
                        on_log=log,
                        **trade_kwargs,
                    )
                    if trade_id:
                        break
                    attempt += 1
                    if attempt < 4:
                        log(f"[{self.symbol}] ‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞. –ü–∞—É–∑–∞ –∏ –ø–æ–≤—Ç–æ—Ä.")
                        await self.sleep(1.0)
                if not trade_id:
                    log(
                        f"[{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–¥–µ–ª–∫—É –ø–æ—Å–ª–µ 4 –ø–æ–ø—ã—Ç–æ–∫. –ñ–¥—ë–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª."
                    )
                    series_direction = None
                    continue

                did_place_any_trade = True

                # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ (–¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
                from datetime import datetime

                if self._trade_type == "classic" and self._next_expire_dt is not None:
                    trade_seconds = max(
                        0.0,
                        (
                            self._next_expire_dt - datetime.now(MOSCOW_TZ)
                        ).total_seconds(),
                    )
                    expected_end_ts = self._next_expire_dt.timestamp()
                else:
                    trade_seconds = float(self._trade_minutes) * 60.0
                    expected_end_ts = datetime.now().timestamp() + trade_seconds

                wait_seconds = self.params.get("result_wait_s")
                if wait_seconds is None:
                    wait_seconds = trade_seconds
                else:
                    wait_seconds = float(wait_seconds)

                placed_at_str = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                trade_symbol = self.symbol
                trade_timeframe = self.timeframe
                if callable(self._on_trade_pending):
                    try:
                        self._on_trade_pending(
                            trade_id=trade_id,
                            symbol=trade_symbol,
                            timeframe=trade_timeframe,
                            signal_at=self._last_signal_at_str,
                            placed_at=placed_at_str,
                            direction=status,
                            stake=float(stake),
                            percent=int(pct),
                            wait_seconds=float(trade_seconds),
                            account_mode=account_mode,
                            indicator=self._last_indicator,
                            expected_end_ts=expected_end_ts,
                        )
                    except Exception:
                        pass

                self._register_pending_trade(trade_id, trade_symbol, trade_timeframe)

                ctx = dict(
                    trade_id=trade_id,
                    wait_seconds=float(wait_seconds),
                    placed_at=placed_at_str,
                    signal_at=self._last_signal_at_str,
                    symbol=trade_symbol,
                    timeframe=trade_timeframe,
                    direction=status,
                    stake=float(stake),
                    percent=int(pct),
                    account_mode=account_mode,
                    indicator=self._last_indicator,
                )

                if self._allow_parallel_trades:
                    task = asyncio.create_task(
                        self._wait_for_trade_result(**ctx)
                    )
                    self._launch_trade_result_task(task)
                    profit = await task
                else:
                    profit = await self._wait_for_trade_result(**ctx)

                if profit is None:
                    log(f"[{self.symbol}] ‚ö† –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ LOSS.")
                    step += 1
                elif profit > 0:
                    log(
                        f"[{self.symbol}] ‚úÖ WIN: profit={format_amount(profit)}. –û—Ç–∫–∞—Ç –Ω–∞ –¥–≤–∞ —à–∞–≥–∞ –Ω–∞–∑–∞–¥."
                    )
                    next_start_step = max(1, step - 2)
                    break
                elif abs(profit) < 1e-9:
                    log(
                        f"[{self.symbol}] ü§ù PUSH: –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏. –ü–æ–≤—Ç–æ—Ä —à–∞–≥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
                    )
                else:
                    log(
                        f"[{self.symbol}] ‚ùå LOSS: profit={format_amount(profit)}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∏—Å–ª—É."
                    )
                    step += 1

                await self.sleep(0.2)

            if not self._running:
                break

            if not did_place_any_trade:
                log(
                    f"[{self.symbol}] ‚Ñπ –°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —Å–¥–µ–ª–æ–∫ (max_steps={max_steps} –∏–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å). "
                    f"–°–µ—Ä–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {series_left}."
                )
            else:
                if step > max_steps:
                    log(
                        f"[{self.symbol}] üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —à–∞–≥–æ–≤ ({max_steps}). –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏."
                    )
                    next_start_step = 1
                series_left -= 1
                log(f"[{self.symbol}] ‚ñ∂ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ—Ä–∏–π: {series_left}")

        self._running = False

        await self._cancel_signal_listener()

        if self._pending_tasks:
            await asyncio.gather(*list(self._pending_tasks), return_exceptions=True)
            self._pending_tasks.clear()

        (self.log or (lambda s: None))(f"[{self.symbol}] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
