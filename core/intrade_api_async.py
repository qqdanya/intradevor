# core/intrade_api_async.py
from __future__ import annotations

import asyncio
from typing import Optional, Tuple

from bs4 import BeautifulSoup

from core.http_async import HttpClient
from core.policy import DEFAULT_ACCOUNT_CCY, clamp_stake, normalize_sprint
from core.money import format_amount
from core.intrade_api import (
    _parse_balance_text,
)  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä sync-–≤–µ—Ä—Å–∏–∏

# —Ç–µ –∂–µ –ø—É—Ç–∏, –Ω–æ –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ ‚Äî HttpClient –¥–æ–±–∞–≤–∏—Ç base_url —Å–∞–º
PATH_BALANCE = "balance.php"
PATH_TRADE = "ajax5_new.php"
PATH_TRADE_CHECK = "trade_check2.php"
PATH_PERCENT = "ajax_percent.php"
PATH_RISK = "risk_manage.php"
PATH_CCY = "user_currency_edit.php"
PATH_TOGGLE_REAL_DEMO = "user_real_trade.php"
PATH_PROFILE = "profile"


# ---------------- –ë–∞–ª–∞–Ω—Å / –≤–∞–ª—é—Ç–∞ ----------------


async def get_balance_info(
    client: HttpClient, user_id: str, user_hash: str
) -> Tuple[float, str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (amount, currency, display) –∫–∞–∫ sync-–≤–µ—Ä—Å–∏—è.
    """
    payload = {"user_id": user_id, "user_hash": user_hash}
    text = await client.post(PATH_BALANCE, data=payload, expect_json=False)
    amount, currency, display = _parse_balance_text(text)
    if not currency:
        currency = DEFAULT_ACCOUNT_CCY
        # –ø–æ–¥–ø—Ä–∞–≤–∏–º display –ø–æ–¥ —Å–∏–º–≤–æ–ª, –∫–∞–∫ –≤ sync-–≤–µ—Ä—Å–∏–∏
        if currency == "RUB" and "‚ÇΩ" not in display:
            display = f"{display} ‚ÇΩ"
        elif currency == "USD" and "$" not in display:
            display = f"{display} $"
    return amount, currency, display


async def get_balance(client: HttpClient, user_id: str, user_hash: str) -> float:
    amount, _, _ = await get_balance_info(client, user_id, user_hash)
    return amount


async def get_balance_str(client: HttpClient, user_id: str, user_hash: str) -> str:
    _, _, display = await get_balance_info(client, user_id, user_hash)
    return display


async def get_account_currency(client: HttpClient, user_id: str, user_hash: str) -> str:
    _, ccy, _ = await get_balance_info(client, user_id, user_hash)
    return ccy


# ---------------- –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥ —Å—Ç–∞–≤–∫—É ----------------


async def get_current_percent(
    client: HttpClient,
    investment: float | int | str,
    option: str,
    minutes: int | str = 1,
    account_ccy: str = "RUB",
    trade_type: str = "Sprint",
) -> Optional[int]:
    """
    –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç form-data –∫–∞–∫ sync, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int|None.
    """
    t = "Classic" if str(trade_type).lower() == "classic" else "Sprint"
    payload = {
        "type": t,
        "currency_name": account_ccy,
        "investment": str(investment),
        "percent": "79",
        "option": option.replace("/", ""),
    }
    if str(trade_type).lower() == "sprint":
        payload["time"] = str(int(minutes))

    print(payload)
    text = await client.post(PATH_PERCENT, data=payload, expect_json=False)
    print(text)
    try:
        return int(str(text).strip())
    except Exception:
        return None


# ---------------- –°–¥–µ–ª–∫–∞ ----------------


async def place_trade(
    client: HttpClient,
    user_id: str,
    user_hash: str,
    investment: float | int | str,
    option: str,
    status: int,  # 1/2
    minutes: int | str,  # –º–∏–Ω—É—Ç—ã –∏–ª–∏ HH:MM
    *,
    account_ccy: str = DEFAULT_ACCOUNT_CCY,
    strict: bool = True,
    on_log=None,
    trade_type: str = "sprint",
    date: str = "0",
) -> Optional[str]:
    """
    –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∫–∞–∫ –≤ sync-–≤–µ—Ä—Å–∏–∏:
      - –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ø—Ä–∏–Ω—Ç–∞ (–¥–ª—è sprint)
      - –ø—Ä–∏–≤–æ–¥ –∫ –ª–∏–º–∏—Ç–∞–º —Å—É–º–º—ã
      - POST –∏ –ø–∞—Ä—Å–∏–Ω–≥ HTML –æ—Ç–≤–µ—Ç–∞ –¥–ª—è data-id
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç trade_id –∏–ª–∏ None.
    """
    if str(trade_type).lower() == "classic":
        time_value = str(minutes)
    else:
        # --- –≤—Ä–µ–º—è —Å–ø—Ä–∏–Ω—Ç–∞
        try:
            m = int(minutes)
        except Exception:
            if on_log:
                on_log(f"[{option}] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç: {minutes}")
            return None

        norm_m = normalize_sprint(option, m)
        if norm_m is None:
            if on_log:
                if option == "BTCUSDT":
                    on_log(
                        f"[{option}] üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è —Å–ø—Ä–∏–Ω—Ç–∞: {m} –º–∏–Ω. –†–∞–∑—Ä–µ—à–µ–Ω–æ 5‚Äì500."
                    )
                else:
                    on_log(
                        f"[{option}] üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è —Å–ø—Ä–∏–Ω—Ç–∞: {m} –º–∏–Ω. –†–∞–∑—Ä–µ—à–µ–Ω–æ 1 –∏–ª–∏ 3‚Äì500."
                    )
            return None
        time_value = str(norm_m)

    # --- —Å—É–º–º–∞
    try:
        inv = float(investment)
    except Exception:
        if on_log:
            on_log(f"[{option}] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {investment}")
        return None

    clamped = clamp_stake(account_ccy, inv)
    if clamped != inv:
        msg = (
            f"[{option}] ‚ÑπÔ∏è –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –∫ –ª–∏–º–∏—Ç–∞–º {account_ccy}: "
            f"{format_amount(clamped)}"
        )
        if strict:
            if on_log:
                on_log(f"[{option}] üö´ –°—Ç–∞–≤–∫–∞ –≤–Ω–µ –ª–∏–º–∏—Ç–æ–≤ {account_ccy}. {msg}")
            return None
        else:
            if on_log:
                on_log(msg)
    investment = str(clamped)

    # --- POST —Å–¥–µ–ª–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥ HTML
    payload = {
        "user_id": user_id,
        "user_hash": user_hash,
        "option": option.replace("/", ""),
        "investment": investment,
        "time": time_value,
        "date": date,
        "trade_type": str(trade_type),
        "status": str(status),
    }
    html = await client.post(PATH_TRADE, data=payload, expect_json=False)
    soup = BeautifulSoup(html, "html.parser")
    trade = soup.find("tr", class_="trade_graph_tick")
    if trade and trade.has_attr("data-id"):
        return trade["data-id"]
    return None


async def check_trade_result(
    client: HttpClient,
    user_id: str,
    user_hash: str,
    trade_id: str,
    wait_time: float = 60.0,
) -> Optional[float]:
    """Fetch trade result, polling until it becomes available.

    –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ –∂–¥—ë–º ``wait_time`` —Å–µ–∫—É–Ω–¥ (–≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–∏–Ω—Ç–∞),
    –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω, —Ç–æ
    –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ–≥–æ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
    –Ω–µ –≤–µ—Ä–Ω—ë—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ö–æ—Ä–æ—É—Ç–∏–Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
    ``asyncio.CancelledError``.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å (``result - investment``) –∫–∞–∫ ``float``.
    """

    await asyncio.sleep(wait_time)
    payload = {"user_id": user_id, "user_hash": user_hash, "trade_id": trade_id}

    while True:
        try:
            text = await client.post(PATH_TRADE_CHECK, data=payload, expect_json=False)
        except asyncio.CancelledError:  # —É–≤–∞–∂–∞—Ç—å –æ—Ç–º–µ–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            raise
        except Exception:
            text = ""

        parts = str(text).strip().split(";")
        if len(parts) >= 3:
            try:
                rate, result, investment = parts[:3]
                return float(result) - float(investment)
            except Exception:
                pass

        # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        await asyncio.sleep(1.0)


# ---------------- –ü—Ä–æ—á–µ–µ: —Ä–∏—Å–∫/–≤–∞–ª—é—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ----------------


async def change_currency(client: HttpClient, user_id: str, user_hash: str) -> bool:
    payload = {"user_id": user_id, "user_hash": user_hash}
    try:
        await client.post(PATH_CCY, data=payload, expect_json=False)
        return True
    except Exception:
        return False


async def set_risk(
    client: HttpClient,
    user_id: str,
    user_hash: str,
    risk_min: int | float,
    risk_max: int | float,
) -> bool:
    payload = {
        "user_id": user_id,
        "user_hash": user_hash,
        "risk_manage_min": risk_min,
        "risk_manage_max": risk_max,
    }
    try:
        await client.post(PATH_RISK, data=payload, expect_json=False)
        return True
    except Exception:
        return False


async def toggle_real_demo(client: HttpClient, user_id: str, user_hash: str) -> bool:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –†–µ–∞–ª/–î–µ–º–æ.
    API: POST user_real_trade.php —Å user_id –∏ user_hash.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ (—Å–µ—Ä–≤–µ—Ä —Å–∞–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç —Ä–µ–∂–∏–º).
    """
    payload = {"user_id": user_id, "user_hash": user_hash}
    try:
        # –û—Ç–≤–µ—Ç –Ω–µ –≤–∞–∂–µ–Ω, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª
        await client.post(PATH_TOGGLE_REAL_DEMO, data=payload, expect_json=False)
        return True
    except Exception:
        return False


async def is_demo_account(client: HttpClient) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–µ–º–æ-—Å—á—ë—Ç.
    –ü—Ä–∏–∑–Ω–∞–∫: –≤ /profile –µ—Å—Ç—å <input type="hidden" name="demo_update" value="1">.
    """
    try:
        html = await client.get(PATH_PROFILE, expect_json=False)
        soup = BeautifulSoup(html, "html.parser")
        inp = soup.find("input", attrs={"name": "demo_update"})
        return bool(inp and inp.get("value") == "1")
    except Exception:
        # –í —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ù–ï –¥–µ–º–æ, —á—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ
        return False
