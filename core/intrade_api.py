import asyncio
import re

from bs4 import BeautifulSoup

from core import config
from core.money import format_amount
from core.policy import (
    DEFAULT_ACCOUNT_CCY,
    clamp_stake,
    normalize_sprint,
)

_SPACE_RE = re.compile(r"\s+")
_NUMERIC_RE = re.compile(r"[^0-9,\.\-]")

_CURRENCY_DEFINITIONS = {
    "RUB": {
        "symbols": ("‚ÇΩ",),
        "keywords": ("—Ä—É–±", "rub", "rur"),
    },
    "USD": {
        "symbols": ("$",),
        "keywords": ("usd", "–¥–æ–ª", "dollar"),
    },
}

BALANCE_URL = f"{config.base_url}/balance.php"
TRADE_URL = f"{config.base_url}/ajax5_new.php"
TRADE_CHECK_URL = f"{config.base_url}/trade_check2.php"
PERCENT_URL = f"{config.base_url}/ajax_percent.php"
RISK_URL = f"{config.base_url}/risk_manage.php"
CURRENCY_URL = f"{config.base_url}/user_currency_edit.php"


def change_currency(session, user_id, user_hash):
    payload = {"user_id": user_id, "user_hash": user_hash}
    r = session.post(CURRENCY_URL, data=payload)
    return r.ok


def set_risk(session, user_id, user_hash, risk_min, risk_max):
    payload = {
        "user_id": user_id,
        "user_hash": user_hash,
        "risk_manage_min": risk_min,
        "risk_manage_max": risk_max,
    }
    r = session.post(RISK_URL, data=payload)
    return r.ok


def _normalise_whitespace(text: str) -> str:
    cleaned = (
        text.replace("\xa0", " ")
        .replace("\u202f", " ")
        .replace("\u2212", "-")
    )
    return _SPACE_RE.sub(" ", cleaned).strip()


def _detect_currency(raw: str, lower: str) -> tuple[str | None, str]:
    for code, meta in _CURRENCY_DEFINITIONS.items():
        symbols = meta["symbols"]
        keywords = meta["keywords"]
        if any(sym and sym in raw for sym in symbols):
            return code, symbols[0]
        if any(keyword in lower for keyword in keywords):
            return code, symbols[0]
    return None, ""


def _normalise_numeric(raw: str) -> str:
    compact = raw.replace(" ", "")
    numeric = _NUMERIC_RE.sub("", compact)
    if not numeric:
        return "0"

    has_comma = "," in numeric
    has_dot = "." in numeric

    if has_comma and not has_dot:
        return numeric.replace(",", ".")
    if has_comma and has_dot:
        last_comma = numeric.rfind(",")
        last_dot = numeric.rfind(".")
        if last_comma > last_dot:
            # comma is decimal separator -> remove dots (thousands)
            return numeric.replace(".", "").replace(",", ".")
        return numeric.replace(",", "")
    return numeric


def _format_display(amount: float, symbol: str) -> str:
    display_amount = f"{amount:,.2f}".replace(",", " ")
    return f"{display_amount} {symbol}".rstrip() if symbol else display_amount


def _parse_balance_text(text: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (amount: float, currency: str|None, display: str)
    –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞: "12 345,67 ‚ÇΩ" –∏–ª–∏ "$1234.56" –∏–ª–∏ "12 345.67 —Ä—É–±."
    """

    raw_norm = _normalise_whitespace(text or "")
    lower = raw_norm.lower()
    currency, symbol = _detect_currency(raw_norm, lower)

    numeric = _normalise_numeric(raw_norm)
    try:
        amount = float(numeric)
    except ValueError:
        amount = 0.0

    display = _format_display(amount, symbol)
    return amount, currency, display


def get_balance_info(session, user_id, user_hash):
    """
    –î–µ–ª–∞–µ—Ç 1 –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (amount: float, currency: str, display: str).
    currency ‚Äî 'RUB'/'USD' (–µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏, –≤–µ—Ä–Ω—ë—Ç—Å—è DEFAULT_ACCOUNT_CCY).
    display ‚Äî –≥–æ—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è UI, –Ω–∞–ø—Ä–∏–º–µ—Ä: '12 345.67 ‚ÇΩ'.
    """
    payload = {"user_id": user_id, "user_hash": user_hash}
    r = session.post(BALANCE_URL, data=payload)
    if not r.ok:
        return 0.0, DEFAULT_ACCOUNT_CCY, "–æ—à–∏–±–∫–∞"

    amount, currency, display = _parse_balance_text(r.text)
    if not currency:
        currency = DEFAULT_ACCOUNT_CCY
        # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–æ–∫ –∫ display
        if currency == "RUB" and "‚ÇΩ" not in display:
            display = f"{display} ‚ÇΩ"
        elif currency == "USD" and "$" not in display:
            display = f"{display} $"
    return amount, currency, display


# ---- –¢–æ–Ω–∫–∏–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏/—É–¥–æ–±—Å—Ç–≤–∞ ----


def get_balance(session, user_id, user_hash) -> float:
    """–û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –Ω–æ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞."""
    amount, _, _ = get_balance_info(session, user_id, user_hash)
    return amount


def get_balance_str(session, user_id, user_hash) -> str:
    """–ì–æ—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è UI, –Ω–∞–ø—Ä–∏–º–µ—Ä '12 345.67 ‚ÇΩ' –∏–ª–∏ '–æ—à–∏–±–∫–∞'."""
    _, _, display = get_balance_info(session, user_id, user_hash)
    return display


def get_account_currency(session, user_id, user_hash) -> str:
    """'RUB' –∏–ª–∏ 'USD' (–ø—Ä–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ ‚Äî DEFAULT_ACCOUNT_CCY)."""
    _, currency, _ = get_balance_info(session, user_id, user_hash)
    return currency


def get_current_percent(
    session, investment, option, minutes=1, account_ccy="RUB", trade_type="sprint"
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É/–≤—Ä–µ–º—è/—Å–∏–º–≤–æ–ª.
    minutes/ccy –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    """
    trade_type_str = str(trade_type).strip()
    trade_type_lower = trade_type_str.lower()
    t = "Classic" if trade_type_lower == "classic" else "sprint"
    payload = {
        "type": t,
        "currency_name": account_ccy,  # —Ä–∞–Ω—å—à–µ –±—ã–ª–æ –∂–µ—Å—Ç–∫–æ "RUB"
        "investment": str(investment),
        "percent": "",
        "option": option,
    }
    if trade_type_lower != "classic":
        payload["time"] = str(int(minutes))
    r = session.post(PERCENT_URL, data=payload)
    try:
        return int(r.text.strip())
    except Exception:
        return None


def place_trade(
    session,
    user_id,
    user_hash,
    investment,
    option,  # —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä. "EURUSD" / "BTCUSDT"
    status,  # 1/2
    minutes,  # —Å—Ç—Ä–æ–∫–∞ (HH:MM) –∏–ª–∏ int
    *,
    account_ccy: str = DEFAULT_ACCOUNT_CCY,
    strict: bool = True,
    on_log=None,
    trade_type: str = "sprint",
    date: str = "0",
):
    """
    strict=True  -> –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å).
    strict=False -> —Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ–¥–∂–∞—Ç–∞ –∫ –ª–∏–º–∏—Ç–∞–º, –Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è —Å–ø—Ä–∏–Ω—Ç–∞ –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–ø—Ä–µ—â–∞–µ–º.
    """

    trade_type_str = str(trade_type).strip()
    trade_type_lower = trade_type_str.lower()

    if trade_type_lower == "classic":
        time_value = str(minutes)
    else:
        # ---- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ø—Ä–∏–Ω—Ç–∞
        try:
            m = int(minutes)
        except Exception:
            if on_log:
                on_log(f"[{option}] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç: {minutes}")
            return None

        norm_m = normalize_sprint(option, m)
        if norm_m is None:
            if on_log:
                if option == "BTCUSDT":
                    on_log(
                        f"[{option}] üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è —Å–ø—Ä–∏–Ω—Ç–∞: {m} –º–∏–Ω. –†–∞–∑—Ä–µ—à–µ–Ω–æ 5‚Äì500."
                    )
                else:
                    on_log(
                        f"[{option}] üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è —Å–ø—Ä–∏–Ω—Ç–∞: {m} –º–∏–Ω. –†–∞–∑—Ä–µ—à–µ–Ω–æ 1 –∏–ª–∏ 3‚Äì500."
                    )
            return None
        time_value = str(norm_m)

    # ---- –í–∞–ª–∏–¥–∞—Ü–∏—è/–ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
    try:
        inv = float(investment)
    except Exception:
        if on_log:
            on_log(f"[{option}] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {investment}")
        return None

    clamped = clamp_stake(account_ccy, inv)
    if clamped != inv:
        msg = (
            f"[{option}] ‚ÑπÔ∏è –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –∫ –ª–∏–º–∏—Ç–∞–º {account_ccy}: "
            f"{format_amount(clamped)}"
        )
        if strict:
            if on_log:
                on_log(f"[{option}] üö´ –°—Ç–∞–≤–∫–∞ –≤–Ω–µ –ª–∏–º–∏—Ç–æ–≤ {account_ccy}. {msg}")
            return None
        else:
            if on_log:
                on_log(msg)
    investment = str(clamped)

    # ---- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–¥–µ–ª–∫–∏
    payload = {
        "user_id": user_id,
        "user_hash": user_hash,
        "option": option,
        "investment": investment,
        "time": time_value,
        "date": date,
        "trade_type": trade_type_str,
        "status": str(status),
    }
    r = session.post(TRADE_URL, data=payload)
    soup = BeautifulSoup(r.text, "html.parser")
    trade = soup.find("tr", class_="trade_graph_tick")
    if trade and trade.has_attr("data-id"):
        return trade["data-id"]
    return None


async def check_trade_result(session, user_id, user_hash, trade_id, wait_time=60.0):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä.

    –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è ``wait_time`` —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –û—Ç–º–µ–Ω–∞
    –∫–æ—Ä—É—Ç–∏–Ω—ã –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–º—É –≤—ã—Ö–æ–¥—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.
    """

    await asyncio.sleep(wait_time)
    payload = {"user_id": user_id, "user_hash": user_hash, "trade_id": trade_id}

    while True:
        try:
            r = session.post(TRADE_CHECK_URL, data=payload)
            parts = r.text.strip().split(";")
            if len(parts) >= 3:
                rate, result, investment = parts[:3]
                return float(result) - float(investment)
        except asyncio.CancelledError:
            raise
        except Exception:
            pass

        await asyncio.sleep(1)
